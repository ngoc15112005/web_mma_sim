import random
from dataclasses import asdict
from typing import Iterable

import altair as alt
import pandas as pd
import streamlit as st

import history_manager
from finish_method import FIGHTER_ARCHETYPES
from fighter_class import FIGHTER_CLASSES
from models import Fighter, FightResult, HistoryEntry, TickEvent
from simulation_engine import run_simulation as core_run_simulation

MAX_HISTORY_SIZE = 50
TICK_PER_ROUND = 6
SECONDS_PER_ROUND = 5 * 60

CLASS_POWER_ORDER = [
    "T√¢n binh (Rookie)",
    "K·ª≥ c·ª±u (Veteran)",
    "Ng√¥i sao (Contender)",
    "Nh√† v√¥ ƒë·ªãch (Champion)",
    "Huy·ªÅn tho·∫°i (Legend)",
]
CLASS_POWER_INDEX = {name: idx for idx, name in enumerate(CLASS_POWER_ORDER)}

DIFF_BUCKETS = [
    (15, "Th·∫Øng s√°t n√∫t", "Tr·∫≠n ƒë·∫•u c√≥ th·ªÉ ƒë·ªïi chi·ªÅu ch·ªâ b·∫±ng m·ªôt pha ra ƒë√≤n.", "info"),
    (35, "Th·∫Øng thuy·∫øt ph·ª•c", "√Åp l·ª±c ƒë·ªÅu ƒë·∫∑n qua t·ª´ng hi·ªáp.", "success"),
    (60, "√Åp ƒë·∫£o to√†n di·ªán", "ƒê·ªëi th·ªß li√™n t·ª•c ·ªü th·∫ø ch·ªëng ƒë·ª°.", "warning"),
    (float("inf"), "Outclass ho√†n to√†n", "ƒê·∫≥ng c·∫•p c√°ch bi·ªát r√µ r·ªát.", "error"),
]
ALERT_RENDERERS = {
    "info": st.info,
    "success": st.success,
    "warning": st.warning,
    "error": st.error,
}


def ensure_history_loaded():
    if "fight_history" not in st.session_state:
        st.session_state.fight_history = history_manager.load_history()


def class_rank(name: str) -> int:
    return CLASS_POWER_INDEX.get(name, len(CLASS_POWER_ORDER))


def describe_diff(diff: int):
    if diff == 0:
        return None
    for threshold, title, detail, style in DIFF_BUCKETS:
        if diff <= threshold:
            return title, detail, style
    return None


def detect_upset(entry: HistoryEntry, result: FightResult, diff: int) -> str | None:
    if diff == 0:
        return None
    if result.score_a > result.score_b:
        winner_class = entry.class_a_name
        loser_class = entry.class_b_name
    else:
        winner_class = entry.class_b_name
        loser_class = entry.class_a_name
    winner_rank = class_rank(winner_class)
    loser_rank = class_rank(loser_class)
    if winner_rank < loser_rank and diff >= 40:
        return f"UPSET! {winner_class} t·∫°o ƒë·ªãa ch·∫•n tr∆∞·ªõc {loser_class}."
    return None


def to_tick_event(raw) -> TickEvent | None:
    if isinstance(raw, TickEvent):
        return raw
    if isinstance(raw, dict):
        raw_dict = {
            "round_number": raw.get("round_number", 0),
            "tick_index": raw.get("tick_index", 0),
            "phase": raw.get("phase", "unknown"),
            "actor": raw.get("actor"),
            "description": raw.get("description", ""),
            "impact": float(raw.get("impact", 0.0)),
        }
        return TickEvent(**raw_dict)
    if isinstance(raw, str):
        return TickEvent(
            round_number=0,
            tick_index=0,
            phase="log",
            actor=None,
            description=raw,
            impact=0.0,
        )
    return None


def event_dataframe(events: Iterable[TickEvent]) -> pd.DataFrame:
    rows = []
    for event in events:
        if event.tick_index and TICK_PER_ROUND > 0:
            tick_offset = (event.tick_index - 1) / TICK_PER_ROUND * SECONDS_PER_ROUND
        else:
            tick_offset = 0
        absolute_seconds = (event.round_number - 1) * SECONDS_PER_ROUND + tick_offset
        rows.append(
            {
                "round": event.round_number,
                "tick": event.tick_index,
                "phase": event.phase,
                "actor": event.actor or "-",
                "description": event.description,
                "impact": event.impact,
                "seconds": absolute_seconds,
                "minutes": absolute_seconds / 60.0,
            }
        )
    if not rows:
        return pd.DataFrame(columns=["round", "tick", "phase", "actor", "description", "impact", "minutes"])
    return pd.DataFrame(rows)


def render_event_timeline(df: pd.DataFrame):
    if df.empty:
        st.info("Ch∆∞a c√≥ log chi ti·∫øt cho tr·∫≠n ƒë·∫•u n√†y.")
        return

    base = alt.Chart(df)
    scatter = (
        base.mark_circle(size=85)
        .encode(
            x=alt.X("minutes", title="Ph√∫t (∆∞·ªõc l∆∞·ª£ng)", scale=alt.Scale(zero=False)),
            y=alt.Y("actor:N", title="Di·ªÖn vi√™n"),
            color=alt.Color("phase:N", title="Pha"),
            tooltip=[
                alt.Tooltip("round:N", title="Hi·ªáp"),
                alt.Tooltip("tick:N", title="Pha"),
                alt.Tooltip("phase:N", title="Tr·∫°ng th√°i"),
                alt.Tooltip("actor:N", title="Ng∆∞·ªùi ra ƒë√≤n"),
                alt.Tooltip("description:N", title="M√¥ t·∫£"),
                alt.Tooltip("impact:Q", title="Impact"),
            ],
        )
    )
    st.altair_chart(scatter.interactive(), use_container_width=True)

    st.markdown("#### Timeline s·ª± ki·ªán")
    for _, row in df.sort_values(["round", "tick"]).iterrows():
        impact_txt = f" (impact {row['impact']:.2f})" if row["impact"] else ""
        st.write(
            f"‚Ä¢ Hi·ªáp {int(row['round'])}, pha {int(row['tick'])} "
            f"[{row['phase']}] {row['actor']}: {row['description']}{impact_txt}"
        )


def display_fight_results(entry: HistoryEntry):
    result = entry.fight_result
    diff = abs(result.score_a - result.score_b)

    st.subheader("T·ªïng k·∫øt tr·∫≠n ƒë·∫•u ‚Äì Thang ƒëi·ªÉm 0-100")
    st.write(f"**Tr·∫≠n ƒë·∫•u:** `{entry.class_a_name}` (`{entry.archetype_a_name}`) vs `{entry.class_b_name}` (`{entry.archetype_b_name}`)")
    st.write(f"**ƒêi·ªÉm s·ªë:** `{result.score_a}` ‚Äì `{result.score_b}` *(ch√™nh {diff})*")
    st.caption("ƒêi·ªÉm = K·ªπ nƒÉng ng√†y ƒë·∫•u + phong ƒë·ªô tr·∫≠n ƒë·∫•u (thang 0-100+).")

    diff_summary = describe_diff(diff)
    if diff_summary:
        title, detail, style = diff_summary
        ALERT_RENDERERS[style](f"{title} (Œî {diff}) ‚Äì {detail}")

    upset = detect_upset(entry, result, diff)
    if upset:
        st.warning(upset)

    st.success(f"**K·∫øt qu·∫£:** {result.result_description}")
    st.write(f"**Ki·ªÉu k·∫øt th√∫c:** {result.finish_info.method_type} ‚Äì {result.finish_info.description}")
    st.write(f"**Phong c√°ch ng∆∞·ªùi th·∫Øng:** {result.finish_info.archetype_name}")
    st.write(
        f"**Th·ªùi ƒëi·ªÉm:** Hi·ªáp {result.time_info.round}/{result.time_info.num_rounds} ‚Äì "
        f"{result.time_info.minute}:{str(result.time_info.second).zfill(2)}"
    )
    st.caption(result.time_info.note)

    if result.round_summaries:
        st.markdown("#### ƒêi·ªÉm t·ª´ng hi·ªáp (thang 10-point)")
        st.table(
            [
                {
                    "Hi·ªáp": summary.round_number,
                    "A": summary.score_a,
                    "B": summary.score_b,
                    "Ghi ch√∫": summary.note,
                }
                for summary in result.round_summaries
            ]
        )

        events = [to_tick_event(raw) for summary in result.round_summaries for raw in summary.events]
        events = [event for event in events if event]
        df = event_dataframe(events)
        render_event_timeline(df)


def get_simulation_parameters(selected_class_a: str, selected_class_b: str, selected_archetype_a: str, selected_archetype_b: str):
    class_a_name = selected_class_a if selected_class_a != "Ng·∫´u nhi√™n" else random.choice(list(FIGHTER_CLASSES.keys()))
    class_b_name = selected_class_b if selected_class_b != "Ng·∫´u nhi√™n" else random.choice(list(FIGHTER_CLASSES.keys()))
    archetype_a_name = selected_archetype_a if selected_archetype_a != "Ng·∫´u nhi√™n" else random.choice(list(FIGHTER_ARCHETYPES.keys()))
    archetype_b_name = selected_archetype_b if selected_archetype_b != "Ng·∫´u nhi√™n" else random.choice(list(FIGHTER_ARCHETYPES.keys()))
    return class_a_name, class_b_name, archetype_a_name, archetype_b_name


def run_fight_simulation(class_a_name: str, class_b_name: str, archetype_a_name: str, archetype_b_name: str, num_rounds: int) -> FightResult:
    fighter_a = Fighter(fighter_class=FIGHTER_CLASSES[class_a_name], archetype=FIGHTER_ARCHETYPES[archetype_a_name])
    fighter_b = Fighter(fighter_class=FIGHTER_CLASSES[class_b_name], archetype=FIGHTER_ARCHETYPES[archetype_b_name])
    return core_run_simulation(fighter_a, fighter_b, num_rounds)


def update_history(fight_result: FightResult, class_a_name: str, class_b_name: str, archetype_a_name: str, archetype_b_name: str):
    history_entry = HistoryEntry(
        fight_result=fight_result,
        class_a_name=class_a_name,
        class_b_name=class_b_name,
        archetype_a_name=archetype_a_name,
        archetype_b_name=archetype_b_name,
    )
    st.session_state.fight_history.insert(0, history_entry)
    st.session_state.fight_history = st.session_state.fight_history[:MAX_HISTORY_SIZE]
    history_manager.save_history(st.session_state.fight_history)


def main():
    ensure_history_loaded()

    st.title("üî• M√¥ ph·ªèng MMA ‚Äì Thang ƒëi·ªÉm 0-100")
    rounds = st.radio("Ch·ªçn s·ªë hi·ªáp:", [3, 5], index=0)
    st.markdown("---")

    st.markdown("### 1. Ch·ªçn h·∫°ng ƒë·∫•u")
    class_options = ["Ng·∫´u nhi√™n"] + list(FIGHTER_CLASSES.keys())
    col1, col2 = st.columns(2)
    with col1:
        selected_class_a = st.selectbox("V√µ sƒ© A:", class_options, key="class_a")
    with col2:
        selected_class_b = st.selectbox("V√µ sƒ© B:", class_options, key="class_b")

    st.markdown("### 2. Ch·ªçn phong c√°ch thi ƒë·∫•u")
    archetype_options = ["Ng·∫´u nhi√™n"] + list(FIGHTER_ARCHETYPES.keys())
    col3, col4 = st.columns(2)
    with col3:
        selected_archetype_a = st.selectbox("Phong c√°ch v√µ sƒ© A:", archetype_options, key="archetype_a")
        if selected_archetype_a != "Ng·∫´u nhi√™n":
            st.caption(FIGHTER_ARCHETYPES[selected_archetype_a].description)

    with col4:
        selected_archetype_b = st.selectbox("Phong c√°ch v√µ sƒ© B:", archetype_options, key="archetype_b")
        if selected_archetype_b != "Ng·∫´u nhi√™n":
            st.caption(FIGHTER_ARCHETYPES[selected_archetype_b].description)

    if st.button("üöÄ M√¥ ph·ªèng tr·∫≠n ƒë·∫•u"):
        class_a_name, class_b_name, archetype_a_name, archetype_b_name = get_simulation_parameters(
            selected_class_a, selected_class_b, selected_archetype_a, selected_archetype_b
        )
        fight_result = run_fight_simulation(class_a_name, class_b_name, archetype_a_name, archetype_b_name, rounds)
        update_history(fight_result, class_a_name, class_b_name, archetype_a_name, archetype_b_name)

    st.markdown("---")
    st.markdown("## üìú L·ªãch s·ª≠ m√¥ ph·ªèng")
    st.caption("Ph√¢n lo·∫°i ch√™nh l·ªách: ‚â§15 s√°t n√∫t | 16-35 thuy·∫øt ph·ª•c | 36-60 √°p ƒë·∫£o | >60 outclass")

    if not st.session_state.fight_history:
        st.info("Ch∆∞a c√≥ tr·∫≠n ƒë·∫•u n√†o ƒë∆∞·ª£c m√¥ ph·ªèng. B·∫•m n√∫t 'M√¥ ph·ªèng tr·∫≠n ƒë·∫•u' ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        return

    if st.button("üßπ X√≥a l·ªãch s·ª≠"):
        st.session_state.fight_history = []
        history_manager.save_history([])
        st.experimental_rerun()

    for i, entry in enumerate(st.session_state.fight_history):
        result = entry.fight_result
        diff = abs(result.score_a - result.score_b)
        summary = result.result_description.split("(")[0].strip()
        expander_title = (
            f"Tr·∫≠n #{len(st.session_state.fight_history) - i}: "
            f"{entry.class_a_name} vs {entry.class_b_name} | Œî {diff} ‚Äì {summary}"
        )
        with st.expander(expander_title, expanded=(i == 0)):
            display_fight_results(entry)


if __name__ == "__main__":
    main()
